package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/http/cookiejar"
	"net/url"
	"regexp"
	"strconv"
	"strings"
	"sync"
)
var (
	cli http.Client
	OpJar *cookiejar.Jar
	wg sync.WaitGroup
)

type course struct {
	id string
	Rwmc string
}

func init(){
	cli = http.Client{}
	OpJar, _ = cookiejar.New(nil)
	cli.Jar = OpJar
}

func Xk(course_name string){

	//GET https://tis.sustech.edu.cn/student_index
	req,_:= http.NewRequest("GET","https://tis.sustech.edu.cn/student_index",nil)
	cli.Do(req)

	//GET https://tis.sustech.edu.cn/Xsxk/query/2
	req,_= http.NewRequest("GET","https://tis.sustech.edu.cn/Xsxk/query/2",nil)
	cli.Do(req)

	p_ids := queryKxrw(course_name)
	flag:=0
	fmt.Println("是否进行选课:(0 否 1 是)")
	fmt.Scan(&flag)
	if flag==1{
		for i:=0;i<len(p_ids);i++{
			i := i
			wg.Add(1)
			go func() {
				//Xk
				urls := url.Values{}
				urls.Add("p_pylx","2")
				urls.Add("mxpylx","2")
				urls.Add("p_sfgldjr","0")
				urls.Add("p_sfredis","0")
				urls.Add("p_sfsyxkgwc","0")
				urls.Add("p_xktjz","rwtjzyx")
				urls.Add("p_chaxunxh","")
				urls.Add("p_gjz","")
				urls.Add("p_skjs","")
				urls.Add("p_xn","2021-2022")
				urls.Add("p_xq","1")
				urls.Add("p_xnxq","2021-20221")
				urls.Add("p_dqxn","2021-2022")
				urls.Add("p_dqxq","1")
				urls.Add("p_dqxnxq","2021-20221")
				urls.Add("p_xkfsdm","jhnxk")
				urls.Add("p_xiaoqu","")
				urls.Add("p_kkyx","")
				urls.Add("p_kclb","")
				urls.Add("p_xkxs","")
				urls.Add("p_id",p_ids[i])
				urls.Add("p_sfhlctkc","0")
				urls.Add("p_sfhllrlkc","0")
				urls.Add("p_kxsj_xqj","")
				urls.Add("p_kxsj_ksjc","")
				urls.Add("p_kxsj_jsjc","")
				urls.Add("p_kcdm_js","")
				urls.Add("p_kcdm_cxrw","")
				urls.Add("p_kc_gjz","")
				urls.Add("p_xzcxtjz_nj","")
				urls.Add("p_xzcxtjz_yx","")
				urls.Add("p_xzcxtjz_zy","")
				urls.Add("p_xzcxtjz_zyfx","")
				urls.Add("p_xzcxtjz_bj","")
				urls.Add("p_sfxsgwckb","1")
				urls.Add("p_skyy","")
				urls.Add("p_chaxunxkfsdm","")
				urls.Add("pageNum","1")
				urls.Add("pageSize","12")
				for {
					req,_:=http.NewRequest("POST","https://tis.sustech.edu.cn/Xsxk/addGouwuche",strings.NewReader(urls.Encode()))
					req.Header.Add("rolecode","02")
					req.Header.Add("x-requested-with","XMLHttpRequest")
					req.Header.Add("content-length",strconv.Itoa(len([]byte(urls.Encode()))))
					req.Header.Add("content-type", "application/x-www-form-urlencoded; charset=UTF-8")
					resp,_:=cli.Do(req)
					body,_:=io.ReadAll(resp.Body)
					fmt.Println(string(body))
					if strings.Contains(string(body),"操作成功"){
						break
					}
				}
				wg.Done()
			}()
		}
		wg.Wait()
		fmt.Println("选课成功！")
	}
}

func queryKxrw(coures_name string) []string{
	p_ids:=[]string{}
	urls := url.Values{}
	urls.Add("p_pylx","2")
	urls.Add("mxpylx","2")
	urls.Add("p_sfgldjr","0")
	urls.Add("p_sfredis","0")
	urls.Add("p_sfsyxkgwc","0")
	urls.Add("p_xktjz","rwtjzyx")
	urls.Add("p_chaxunxh","")
	urls.Add("p_gjz",coures_name)
	urls.Add("p_skjs","")
	urls.Add("p_xn","2021-2022")
	urls.Add("p_xq","1")
	urls.Add("p_xnxq","2021-20221")
	urls.Add("p_dqxn","2021-2022")
	urls.Add("p_dqxq","1")
	urls.Add("p_dqxnxq","2021-20221")
	urls.Add("p_xkfsdm","jhnxk")
	urls.Add("p_xiaoqu","")
	urls.Add("p_kkyx","")
	urls.Add("p_kclb","")
	urls.Add("p_xkxs","")
	urls.Add("p_ids","")
	urls.Add("p_sfhlctkc","0")
	urls.Add("p_sfhllrlkc","0")
	urls.Add("p_kxsj_xqj","")
	urls.Add("p_kxsj_ksjc","")
	urls.Add("p_kxsj_jsjc","")
	urls.Add("p_kcdm_js","")
	urls.Add("p_kcdm_cxrw","")
	urls.Add("p_kc_gjz","")
	urls.Add("p_xzcxtjz_nj","")
	urls.Add("p_xzcxtjz_yx","")
	urls.Add("p_xzcxtjz_zy","")
	urls.Add("p_xzcxtjz_zyfx","")
	urls.Add("p_xzcxtjz_bj","")
	urls.Add("p_sfxsgwckb","1")
	urls.Add("p_skyy","")
	urls.Add("p_chaxunxkfsdm","")
	urls.Add("pageNum","1")
	urls.Add("pageSize","12")
	req,_:=http.NewRequest("POST","https://tis.sustech.edu.cn/Xsxk/queryKxrw",strings.NewReader(urls.Encode()))
	req.Header.Add("rolecode","02")
	req.Header.Add("x-requested-with","XMLHttpRequest")
	req.Header.Add("content-length",strconv.Itoa(len([]byte(urls.Encode()))))
	req.Header.Add("content-type", "application/x-www-form-urlencoded; charset=UTF-8")
	resp,_:=cli.Do(req)
	body,_:=io.ReadAll(resp.Body)
	auto:=AutoGenerated{}
	err:=json.Unmarshal(body,&auto)
	if err!=nil{
		fmt.Println(err)
		return nil
	}
	coures:=[]course{}

	for _,v:=range auto.KxrwList.List{
		if v.Kcmc == coures_name{
			coures = append(coures,course{
				id: v.ID,
				Rwmc: v.Rwmc,
			})
			p_ids = append(p_ids,v.ID)
		}
	}
	fmt.Println("选课信息：")
	fmt.Printf("%v\n",coures)
	return p_ids
}

func login(userid,passwd string) (string,int){
	if userid==""||passwd==""{
		return "Input error",0
	}
	//GET JSESSIONID and route
	resp,_:=cli.Get("https://tis.sustech.edu.cn/session/invalid")
	req,_:= http.NewRequest("GET","https://tis.sustech.edu.cn/cas",nil)
	resp,_ = cli.Do(req)

	//Get the execution
	body,_:=io.ReadAll(resp.Body)
	reg,_:=regexp.Compile("<input type=\"hidden\" name=\"execution\" value=\".*\"/>")
	params:=reg.FindStringSubmatch(string(body))
	if len(params)==0{
		fmt.Println("GET execution error!")
		return "Time out, Try again",-2
	}
	execution:=params[0][45:len(params[0])-97]

	//get DISSESSION
	req,_=http.NewRequest("GET","https://cas.sustech.edu.cn/cas/clientredirect?client_name=Wework&service=https%3A%2F%2Ftis.sustech.edu.cn%2Fcas",nil)
	resp,_=cli.Do(req)

	//GET TGC
	urls:=url.Values{}
	urls.Add("execution",execution)
	urls.Add("username",userid)
	urls.Add("password",passwd)
	urls.Add("_eventId","submit")
	urls.Add("geolocation","")

	req,_= http.NewRequest("POST","https://cas.sustech.edu.cn/cas/login?service=https%3A%2F%2Ftis.sustech.edu.cn%2Fcas",strings.NewReader(urls.Encode()))
	req.Header.Add("Content-Length",strconv.Itoa(len([]byte(urls.Encode()))))
	req.Header.Add("Content-Type","application/x-www-form-urlencoded")
	req.Header.Add("rolecode","02")
	resp,_=cli.Do(req)
	if resp.StatusCode==401{
		return "Wrong passwd or userId",-1
	}
	return "Successfully Login!",1
}
func main(){
	username:=""
	passwd:=""
	course_name:=""
	fmt.Println("Please Input your userid and passwd:")
	fmt.Scanf("-u %s\n",&username)
	fmt.Scanf("-p %s\n",&passwd)
	res,status:=login(username,passwd)
	fmt.Println(res)
	for status!=1{
		fmt.Println("Please Input your userid and passwd Again:")
		fmt.Scanf("-u %s\n",&username)
		fmt.Scanf("-p %s\n",&passwd)
		res,status = login(username,passwd)
		fmt.Println(res)
	}
	fmt.Println("Please Input the coure_name you need")
	fmt.Scan(&course_name)
	Xk(course_name)
}
